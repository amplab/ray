// This file defines the GRPC interface between scheduler, object stores and
// workers. These are used for communication over the network.

// Terminology:
// Worker: A cluster consists of multiple worker processes (typically one
//   per core) which execute tasks that can access objects from object stores.
// Object store: Typically there is one object store per node which holds the
//   objects locally stored on that node.
// Scheduler: The scheduler process keeps track of a mapping from object
//   references to object stores, orchestrates data transfer between object
//   stores and assigns tasks to workers.

syntax = "proto3";

import "types.proto";

// Scheduler

service Scheduler {
  // Register a new worker with the scheduler
  rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerReply);
  // Register an object store with the scheduler
  rpc RegisterObjStore(RegisterObjStoreRequest) returns (RegisterObjStoreReply);
  // Tell the scheduler that a worker can execute a certain function
  rpc RegisterFunction(RegisterFunctionRequest) returns (AckReply);
  // Asks the scheduler to execute a task, immediately returns an object reference to the result
  rpc RemoteCall(RemoteCallRequest) returns (RemoteCallReply);
  // Increment the count of the object reference
  rpc IncrementCount(ChangeCountRequest) returns (AckReply);
  // Decrement the count of the object reference
  rpc DecrementCount(ChangeCountRequest) returns (AckReply);
  // Request an object reference for an object that will be pushed to an object store
  rpc PushObj(PushObjRequest) returns (PushObjReply);
  // Request delivery of an object from an object store that holds the object to the local object store
  rpc RequestObj(RequestObjRequest) returns (AckReply);
  // Used by the worker to tell the scheduler that two objrefs should refer to the same object
  rpc AliasObjRefs(AliasObjRefsRequest) returns (AckReply);
  // Used by an object store to tell the scheduler that an object is ready (i.e. has been finalized and can be shared)
  rpc ObjReady(ObjReadyRequest) returns (AckReply);
  // Increments the reference count of a particular object reference
  rpc IncrementRefCount(IncrementRefCountRequest) returns (AckReply);
  // Decrements the reference count of a particular object reference
  rpc DecrementRefCount(DecrementRefCountRequest) returns (AckReply);
  // Used by the worker to notify the scheduler about which objrefs a particular object contains
  rpc AddContainedObjRefs(AddContainedObjRefsRequest) returns (AckReply);
  // Used by the worker to report back and ask for more work
  rpc WorkerReady(WorkerReadyRequest) returns (AckReply);
  // Get information about the scheduler state
  rpc SchedulerInfo(SchedulerInfoRequest) returns (SchedulerInfoReply);
  // Kill a particular object store (called by a worker).
  rpc KillObjStore(KillObjStoreRequest) returns (AckReply);
  // Kill a particular worker (called by a worker).
  rpc KillWorker(KillWorkerRequest) returns (AckReply);
}

message AckReply {
}

message RegisterWorkerRequest {
  string worker_address = 1; // IP address of the worker being registered
  string objstore_address = 2; // IP address of the object store the worker is connected to
}

message RegisterWorkerReply {
  uint64 workerid = 1; // Worker ID assigned by the scheduler
  uint64 objstoreid = 2; // The Object store ID of the worker's local object store
}

message RegisterObjStoreRequest {
  string objstore_address = 1; // IP address of the object store being registered
}

message RegisterObjStoreReply {
  uint64 objstoreid = 1; // Object store ID assigned by the scheduler
}

message RegisterFunctionRequest {
  uint64 workerid = 1; // Worker that can execute the function
  string fnname = 2; // Name of the function that is registered
  uint64 num_return_vals = 3; // Number of return values of the function
}

message RemoteCallRequest {
  uint64 workerid = 1; // The worker that is calling the remote call
  Call call = 2; // Contains name of the function to be executed and arguments
}

message RemoteCallReply {
  repeated uint64 result = 1; // Object references of the function return values
}

message RequestObjRequest {
  uint64 workerid = 1; // Worker that tries to request the object
  uint64 objref = 2; // Object reference of the object being requested
}

message PushObjRequest {
  uint64 workerid = 1; // Worker that tries to push an object
}

message PushObjReply {
  uint64 objref = 1; // Object reference assigned by the scheduler to the object
  bool already_present = 2; // True if the object is already present in an object store and so doesn't need to be copied (this occurs if the push is re-executed by our fault-tolerance handling)
}

message AliasObjRefsRequest {
  uint64 alias_objref = 1; // ObjRef which will be aliased
  uint64 target_objref = 2; // The target ObjRef
}

message ObjReadyRequest {
  uint64 objref = 1; // Object reference of the object that has been finalized
  uint64 objstoreid = 2; // ID of the object store the object lives on
}

message IncrementRefCountRequest {
  repeated uint64 objref = 1; // Object references whose reference count should be incremented. Duplicates will be incremented multiple times.
}

message AddContainedObjRefsRequest {
  uint64 objref = 1; // The objref of the object in question
  repeated uint64 contained_objref = 2; // Object references contained in the object
}

message DecrementRefCountRequest {
  repeated uint64 objref = 1; // Object references whose reference count should be decremented. Duplicates will be decremented multiple times.
}

message WorkerReadyRequest {
  uint64 workerid = 1; // ID of the worker which is ready
}

message ChangeCountRequest {
  uint64 objref = 1; // Object reference of the object whose reference count is increased or decreased
}

// The following messages are used to get information about the scheduler state

message SchedulerInfoRequest {
}

message FnTableEntry {
  repeated uint64 workerid = 1; // ID of the worker that can execute the function
  uint64 num_return_vals = 2; // Number of return values of the function
}

// TODO(rkn): Cleanup these fields. In particular, choose good names for everything,
// ideally paralleling the names used in scheduler.h. Also, canonicalize the ordering
// of these fields in this file, scheduler.h, get_info, and recover_from_failed_objstore.
message SchedulerInfoReply {
  repeated uint64 taskid = 1; // Tasks on the task queue
  repeated uint64 avail_worker = 3; // List of workers waiting to get a task assigned
  map<string, FnTableEntry> function_table = 2; // Table of all available remote function
  repeated uint64 target_objref = 4; // The target_objrefs_ data structure
  repeated uint64 reference_count = 5; // The reference_counts_ data structure
  repeated Call task = 6; // List of tasks in the computation graph, the index in this list is the TaskId
  repeated TaskList spawned_task = 7; // A list of lists of tasks, the ith element is a list of the taskids spawned by the task with taskid i
  repeated ObjStoreList location_list = 8; // A list of list of ObjStoreIds, the ith element is a list of the objstores containing the object with objref i
  repeated ObjRefList reverse_target_objrefs = 9; // The ith element is a list of the objrefs that alias objref i
  repeated AliasNotification alias_notification = 10; // A list of pending alias notifications
  repeated ObjRefList contained_objrefs = 11; // A list of list of objrefs, the ith element is a list of the objrefs contained in the object with objref i
  repeated Pull pull = 12; // A list of the elements in the pull_queue
  repeated CurrentTask current_task = 13; // A list of the current tasks, the ith element is a description of the current task on worker i
  repeated WorkerField worker = 14; // A list of the workers, the ith element is a description of the ith worker
  repeated ObjStoreField objstore = 15; // A list of the objstores, the ith element is a description of the ith objstore
}

message KillObjStoreRequest {
  uint64 objstoreid = 1; // The id of the objstore to kill
}

message KillWorkerRequest {
  uint64 workerid = 1; // The id of the worker to kill
}

// Object stores

service ObjStore {
  // Tell the object store to begin pulling an object from another object store (called by the scheduler)
  rpc StartDelivery(StartDeliveryRequest) returns (AckReply);
  // Accept incoming data from another object store, as a stream of object chunks
  rpc StreamObjTo(StreamObjToRequest) returns (stream ObjChunk);
  // Notify the object store about objref aliasing. This is called by the scheduler
  rpc NotifyAlias(NotifyAliasRequest) returns (AckReply);
  // Tell the object store to deallocate an object held by the object store. This is called by the scheduler.
  rpc DeallocateObject(DeallocateObjectRequest) returns (AckReply);
  // Get info about the object store state
  rpc ObjStoreInfo(ObjStoreInfoRequest) returns (ObjStoreInfoReply);
  // Kill this object store (called by the scheduler).
  rpc Terminate(TerminateObjStoreRequest) returns (AckReply);
}

message StartDeliveryRequest {
  string objstore_address = 1; // Object store to pull the object from
  uint64 objref = 2; // Reference of object that gets delivered
}

message RegisterObjRequest {
  uint64 objref = 1; // Reference of object that gets registered
}

message RegisterObjReply {
  uint64 handle = 1; // Handle to memory segment where object is stored
}

message StreamObjToRequest {
  uint64 objref = 1; // Object reference of the object being streamed
}

message ObjChunk {
  uint64 total_size = 1; // Total size of the object
  uint64 metadata_offset = 2; // Offset of the arrow metadata
  bytes data = 3; // Data for this chunk of the object
}

message NotifyAliasRequest {
  uint64 alias_objref = 1; // The objref being aliased
  uint64 canonical_objref = 2; // The canonical objref that points to the actual object
}

message DeallocateObjectRequest {
  uint64 canonical_objref = 1; // The canonical objref of the object to deallocate
}

message GetObjRequest {
  uint64 objref = 1; // Object reference of the object being requested by the worker
}

message TerminateObjStoreRequest {
}

// These messages are for getting information about the object store state

message ObjStoreInfoRequest {
}

message ObjStoreInfoReply {
  string address = 1; // The address of the objstore
  uint64 objstoreid = 2; // The id of the objstore
  repeated uint64 memory = 3; // The ith element is the status of the object corresponding to objref i
}

// Workers

service WorkerService {
  // Tells the worker to execute a particular task (called by the scheduler).
  rpc InvokeCall(InvokeCallRequest) returns (InvokeCallReply);
  // Kill this worker (called by the scheduler).
  rpc Terminate(TerminateWorkerRequest) returns (AckReply);
}

message InvokeCallRequest {
  CallToExecute call = 1; // Contains name of the function to be executed and arguments
}

message InvokeCallReply {
}

message TerminateWorkerRequest {
}
